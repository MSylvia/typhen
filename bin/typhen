#!/usr/bin/env node

'use strict';

var _ = require('lodash'),
    path = require('path'),
    pathExists = require('path-exists'),
    nopt = require('nopt'),
    here = require('here').here,
    knownOptions = {
      plugin: String,
      'plugin-options': String,
      'compiler-options': String,
      dest: path,
      help: Boolean,
      version: Boolean,
      verbose: Boolean,
      __main: path, // For test
    },
    shortHands = {
      p: '--plugin',
      P: '--plugin-options',
      o: '--compiler-options',
      d: '--dest',
      h: '--help',
      v: '--version',
      V: '--verbose'
    },
    options = nopt(knownOptions, shortHands, process.argv, 2);

if (options.help) {
  console.log(
    'Version:\n  ' + require('../package.json').version + '\n\n' +
    here(/*
      Usage:
        typhen [options] [typhenfile or declaration-source-file]

      Examples:
        typhen
        typhen typhenfile.js
        typhen --plugin typhen-json-schema --dest generated tsconfig.json
        typhen --plugin typhen-json-schema --dest generated definitions.d.ts

      Options:
        -p, --plugin           Specify plugin name or file path.
        -P, --plugin-options   Specify plugin options (JSON string).
        -o, --compiler-options Specify compiler options (JSON string).
        -d, --dest             Generate files to the directory.
        -h, --help             Print this message.
        -v, --version          Print the package's version.
        -V, --verbose          Verbose mode. A lot more information output.*/).unindent());
   return;
}

if (options.version) {
  console.log('v' + require('../package.json').version);
  return;
}

var typhen = _.isString(options.__main) ? require(options.__main) : require('../lib/index.js');

if (options.verbose) {
  typhen.logger.level = typhen.logger.LogLevel.Debug;
}

if (options.argv.remain.length === 0) {
  if (pathExists.sync(process.cwd() + '/typhenfile.js')) {
    typhen.runByTyphenfile(process.cwd() + '/typhenfile.js').done(function() {}, function(e) { throw e; });
  } else {
    console.log('No typhenfile found');
  }
} else {
  var fileNames = options.argv.remain.map(function (p) { return path.resolve(p); });

  if (fileNames.length === 1 && _.contains(fileNames[0], 'typhenfile')) {
    typhen.runByTyphenfile(fileNames[0]).done(function() {}, function(e) { throw e; });
  } else if (_.isString(options.dest) && _.isString(options.plugin)) {
    var pluginOptions = _.isString(options['plugin-options']) ?  JSON.parse(options['plugin-options']) : {};
    var plugin = typhen.loadPlugin(options.plugin, pluginOptions);

    if (fileNames.length === 1 && fileNames[0].match(/tsconfig.json$/)) {
      var tsconfig = require(fileNames[0]);
      var tsconfigDir = path.dirname(path.resolve(fileNames[0]));

      typhen.run({
        plugin: plugin,
        src: tsconfig.files.map(function(f) { return path.join(tsconfigDir, f); }),
        dest: options.dest,
        compilerOptions: tsconfig.compilerOptions
      }).done(function() {}, function(e) { throw e; });
    } else {
      var compilerOptions = _.isString(options['compiler-options']) ? JSON.parse(options['compiler-options']) : undefined;

      typhen.run({
        plugin: plugin,
        src: fileNames,
        dest: options.dest,
        compilerOptions: compilerOptions
      }).done(function() {}, function(e) { throw e; });
    }
  } else {
    console.log('No plugin and no dest found');
  }
}
